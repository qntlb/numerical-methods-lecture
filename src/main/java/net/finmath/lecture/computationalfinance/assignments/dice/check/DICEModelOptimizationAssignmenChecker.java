package net.finmath.lecture.computationalfinance.assignments.dice.check;

import net.finmath.lecture.computationalfinance.assignments.dice.DICEModelOptimizationAssignment;

public class DICEModelOptimizationAssignmenChecker
{
	public static boolean check(DICEModelOptimizationAssignment solution, DICEModelOptimizationAssignment.AbatementParameterConstraint abatementParameterConstraint) {
		System.out.println("Checking the calibration for the abatement parameter constraint '" + abatementParameterConstraint.name().toLowerCase().replace('_', ' ') + "'.");
		System.out.println("Note: This is just a very rudimentary test.");
		System.out.println("If this test passes, it is not a guarantee that the calibration found the optimal solution (sorry).");

		boolean success = true;
		try {
			for(double discountRate : new double[] { 0.005, 0.015 }) {
				double[] abatement = solution.getDICEModelOptimalAbatementPath(abatementParameterConstraint, discountRate);

				/*
				 * Rudimentary check: bounded and monotone
				 */
				switch(abatementParameterConstraint) {
				case MONOTONE_AND_BOUNDED:
					success &= isMonotone(abatement);
					// Fall through intended
				case BOUNDED:
					success &= isBounded(abatement);
					break;
				}

				/*
				 * Rudimentary check: check that abatement is not all zero
				 */
				boolean isAbatementAllZero = true;
				for (double element : abatement) {
					isAbatementAllZero &= (element == 0);
				}
				if(isAbatementAllZero) {
					System.out.println("\tAbatement vector is all zero, this is likly not the optimal soluation.");
					success = false;
				}
			}
		}
		catch(IllegalArgumentException e) {
			System.out.println("\tThe calibration threw an Exception:");
			System.out.println("\tNote: An IllegalArgumentException may be the result of the learning rate being to large.");			
			System.out.println("\t  ⚠️  Try again with a smaller learning rate.");			
			e.printStackTrace();
			success = false;
		}
		catch(Exception e) {
			System.out.println("\tThe calibration threw an Exception:");
			e.printStackTrace();
			success = false;
		}

		return success;		
	}

	private static boolean isBounded(double[] abatement) {
		double tolerance = 1E-6;
		for (double element : abatement) {
			if(element < 0-tolerance) {
				System.out.println("\tAbatement vector is negative.");
				return false;
			}
			if(element > 1+tolerance) {
				System.out.println("\tAbatement vector larger than one.");
				return false;
			}
		}
		System.out.println("\tAbatement vector is bounded.");
		return true;
	}

	private static boolean isMonotone(double[] abatement) {
		for(int i=1; i<abatement.length; i++) {
			if(abatement[i] < abatement[i-1]) {
				System.out.println("\tAbatement vector is not monotone increasing.");
				return false;
			}
		}
		System.out.println("\tAbatement vector is monotone increasing.");
		return true;
	}

	public static boolean checkCalibration(DICEModelOptimizationAssignment solution) {
		final double tolerance = 0.01;
		double[] targetAbatementValues = new double[] { 0.03, 0.15887437583751154, 0.16217940711726916, 0.16575125225024778, 0.1692738135073358, 0.17306159700491675, 0.1764800060498875, 0.1803353595455528, 0.18427455492568914, 0.18842951933702154, 0.1924598515438475, 0.19676282181606897, 0.20131815013435053, 0.20556893146139546, 0.2104463652553643, 0.21500170764717805, 0.2197827630243893, 0.22451178973930805, 0.22904387604006782, 0.2341325565296749, 0.23920281731125675, 0.24438624153931032, 0.2494884361286586, 0.2552101259312489, 0.26045588837310407, 0.26602319714622286, 0.271591916161233, 0.2771962112951187, 0.2829183857337133, 0.28880443869929034, 0.29458634322260724, 0.3003136237994716, 0.306346070865539, 0.312755335680718, 0.3189761919993791, 0.3253185491594721, 0.33132944385334673, 0.3377611295001717, 0.3442773275247107, 0.35131285680801655, 0.35734175744009783, 0.3647739412724232, 0.3713659835755126, 0.37851308192325805, 0.3856178653472339, 0.39312679605114514, 0.39998564811307996, 0.4062365277516451, 0.4145020757304963, 0.4220527360228487, 0.4301841298751906, 0.4368881128319989, 0.44504480628131055, 0.4535000058075446, 0.46129156827815226, 0.46936096794801463, 0.4769607342714554, 0.48561775842177274, 0.4931159582920683, 0.5012515319054095, 0.5096797175958451, 0.5183035631874151, 0.5274882330482172, 0.5364786068118157, 0.5443906802011593, 0.5533567431960016, 0.5627606378346727, 0.5716919115822171, 0.5804416938180235, 0.5900593155744155, 0.5988675501418153, 0.6085849511750191, 0.6185277536921462, 0.6281908388622272, 0.6379719764483169, 0.6477375739562572, 0.6577821405810963, 0.6672704362220662, 0.6785060110416745, 0.6883005396987757, 0.698726218729336, 0.7091205227472565, 0.720889909534562, 0.7318090348415958, 0.742413455654468, 0.7529862603651186, 0.7638405611503176, 0.7743354225644188, 0.7859813856387758, 0.7969751072774699, 0.8092565865508095, 0.8200022434633741, 0.8310293517095754, 0.8412515672736043, 0.8542285399014193, 0.8663105663277799, 0.8789689348788468, 0.8911468518196128, 0.9038597934909692, 0.9154361083442771, 0.928143751887663, 0.9406742144799488, 0.9536742752127303, 0.9660604497644254, 0.9793424256864348, 0.9940481895688544, 0.9984207039470391, 0.9992277881278991, 0.9994736328903793, 0.9996189378732422, 0.9996990815713337, 0.99973850093856, 0.9997812037543657, 0.9998049889325381, 0.9998266197152125, 0.9998415555475615, 0.9998543105507139, 0.9998646061108633, 0.9998718449648247, 0.9998826885507505, 0.9998854751235496, 0.9998914986273894, 0.9998960520831941, 0.9999001458143251, 0.9999021693187289, 0.9999067605911094, 0.9999076959004916, 0.9999139235697404, 0.9999163341643087, 0.9999190268635042, 0.9999208006181437, 0.9999224264126325, 0.9999242860967233, 0.999925660413997, 0.9999257082342806, 0.9999284157736675, 0.9999293384147983, 0.9999328579863141, 0.9999344881346544, 0.9999350945496525, 0.9999366544719489, 0.9999378476414784, 0.9999357951139987, 0.9999401861844021, 0.9999412747523386, 0.9999399125592616, 0.9999405181214617, 0.9999415156916726, 0.999942758038322, 0.9999420406324991, 0.999942790537806, 0.9999455361207683, 0.9999452018133622, 0.9999455313379969, 0.99994661211866, 0.9999454479015828, 0.9999481752775562, 0.9999491909810365, 0.999947117277345, 0.9999469523478782, 0.9999487304659829, 0.999948987099999, 0.999948504887595, 0.9999487453243248, 0.9999516140773934, 0.9999488923874723, 0.999952120061763, 0.9999508645805215, 0.999950572270301, 0.9999519689402636, 0.9999505975084735, 0.9999519258897182, 0.9999518527677007, 0.9999519063445457, 0.9999528277488355, 0.999953388039035, 0.999953507822741, 0.9999541788530683, 0.9999549907795289, 0.9999547132667128, 0.9999551786105461, 0.999954201907815, 0.9999554247060392, 0.99995585711142, 0.9999570190384451, 0.9999570511112712, 0.9999558058479276, 0.9999546623307431, 0.9999560949846477, 0.9999565374452539, 0.9999549759683111, 0.9999571710265126, 0.9999570176203209, 0.9999578558090472, 0.9999573334221442, 0.9999572871315742, 0.9999575808561747, 0.9999584705527722, 0.9999573231954201, 0.9999580146987352, 0.9999576623779246, 0.9999581549945076, 0.9999584025535544, 0.9999595701561305, 0.9999617425770971, 0.9999604715216732, 0.9999605699898269, 0.9999599771766692, 0.9999609275762579, 0.9999605530208151, 0.999960248439384, 0.9999605233648918, 0.9999606063437353, 0.9999595452119391, 0.999960050643663, 0.9999586098420119, 0.9999585132104699, 0.999959503473609, 0.9999598825920819, 0.9999599877276458, 0.9999591178411061, 0.9999592835395137, 0.9999601302828092, 0.9999584919341968, 0.9999611132707779, 0.9999584636939508, 0.9999613527997603, 0.9999608596158454, 0.9999599393092167, 0.9999602482797243, 0.9999599052738419, 0.999958265448947, 0.9999596479340672, 0.9999576632228568, 0.9999560860675084, 0.999958591019509, 0.9999578656274652, 0.99995627843496, 0.9999566093339997, 0.9999562724220116, 0.9999575371718754, 0.9999550221197441, 0.9999577556041737, 0.9999585090437437, 0.999955999971587, 0.9999539885810509, 0.9999563307242798, 0.9999566832410242, 0.9999561712608324, 0.9999573772729035, 0.9999584141051663, 0.9999588010843342, 0.9999590127099456, 0.9999569340513969, 0.9999603351049314, 0.9999604010454481, 0.99995847983654, 0.9999624611118817, 0.9999592258494479, 0.9999583697422925, 0.9999569453953743, 0.9999584117431214, 0.9999586363454952, 0.999957170937624, 0.9999593401294983, 0.9999593233259332, 0.9999626445187565, 0.9999597018711226, 0.999961020435082, 0.9999580825585674, 0.9999579293856348, 0.9999577242500763, 0.9999577232067463, 0.9999597953264128, 0.9999580435636879, 0.9999569329361424, 0.9999563635039214, 0.9999563457888352, 0.9999576369770983, 0.9999560496103334, 0.9999530971308656, 0.9999557356136858, 0.999956579868669, 0.9999558535548001, 0.999957810342342, 0.9999570528112371, 0.9999587089328061, 0.9999620875379888, 0.9999624164564154, 0.9999611024643347, 0.9999613426556763, 0.9999601222346861, 0.9999604344063534, 0.9999603233561976, 0.9999628612728653, 0.9999593236332459, 0.9999592607872733, 0.999960245807345, 0.9999606958016751, 0.9999601918731224, 0.9999595484733627, 0.9999616216298366, 0.9999583270833817, 0.999959139112298, 0.9999596433263888, 0.999961764072086, 0.9999637527680391, 0.9999615339565117, 0.999961212137356, 0.9999598828579218, 0.9999585082971806, 0.9999603572968389, 0.9999606753466251, 0.9999593086311839, 0.9999597691298991, 0.9999587780069152, 0.9999585431232003, 0.9999590882616535, 0.9999596297578267, 0.9999579040327443, 0.9999571593903871, 0.9999589542512046, 0.9999519726454, 0.9999529761128252, 0.9999563064735884, 0.9999558631816513, 0.9999514106142797, 0.9999549905537278, 0.9999563497777343, 0.9999456373169132, 0.9999511232776858, 0.9999513174980174, 0.9999500167249366, 0.9999495992879549, 0.9999445909005223, 0.9999490516395568, 0.9999462700337303, 0.9999451089934442, 0.9999458341759637, 0.9999400868412378, 0.9999390388213114, 0.9999400383557081, 0.9999396524132891, 0.9999401376798839, 0.9999462810681149, 0.999947954262484, 0.999944876161778, 0.9999437977881515, 0.9999393579730886, 0.9999418430681168, 0.9999357091740182, 0.9999384642314241, 0.99994032141203, 0.9999391094503927, 0.9999389937504974, 0.9999389770881748, 0.999938471773104, 0.999940026413895, 0.9999352837184468, 0.9999416674425726, 0.9999346160019904, 0.9999393977198457, 0.9999409236496234, 0.9999439350921687, 0.9999535698166343, 0.9999452137920495, 0.9999472574697718, 0.9999558701945718, 0.9999586647855304, 0.999963227431565, 0.9999522630288896, 0.9999507083806489, 0.999961459258964, 0.9999578002714694, 0.9999567012481211, 0.9999621717651954, 0.9999654104113123, 0.9999529241295686, 0.9999501782985182, 0.9999524812183372, 0.9999604338351586, 0.9999574901836655, 0.9999577560324917, 0.9999682445263617, 0.9999666074124212, 0.9999629027726108, 0.9999410961288848, 0.9999633924505352, 0.9999689336681742, 0.9999623620097039, 0.9999634594498548, 0.9999637124952279, 0.9999551527632701, 0.9999262382015329, 0.9999395231465019, 0.9999415085926192, 0.9999502948608591, 0.9999503390810429, 0.9999477164846587, 0.9999390111546055, 0.9999394186738761, 0.9999402042406051, 0.9999402243950429, 0.9999357658884539, 0.9999362025756909, 0.999936635890423, 0.9999220034952163, 0.9999081088049137, 0.9999086816414305, 0.9999092504225465, 0.9999262307885396, 0.9999267382241783, 0.9999201564792298, 0.9999206980199049, 0.9999253741705151, 0.9999217687499656, 0.9998852378862406, 0.9999272337462267, 0.9999277324751987, 0.9999282273992478, 0.9999210247307829, 0.999883354299536, 0.999878015943565, 0.9998580283898698, 0.9999179586519571, 0.9998876680907508, 0.9998917323190732, 0.9998436630595772, 0.9998398538159186, 0.9998804918347995, 0.999842005935599, 0.999882077202664, 0.9998602661703325, 0.9998639950280241, 0.999866735846744, 0.9998677603281771, 0.9998687764982203, 0.9998819204514209, 0.9998707842198962, 0.9998717759271376, 0.9998727596342307, 0.9998737354167639, 0.9998747033494608, 0.9998756635061922, 0.9998766159599874, 0.9998775607830462, 0.9997840875584505, 0.999889135562961, 0.9999140121106368, 0.9999147705842674, 0.999915521833912, 0.9999162659394815, 0.9998693997156254, 0.9998705004414559, 0.999871591177189, 0.9998726720287331, 0.9998737431006659, 0.9998801742714536, 0.9998566038782855, 0.9998578193334972, 0.9998837648312526, 0.9998847680300983, 0.999843870369568, 0.9997718512088911, 0.9997736852705432, 0.9998064576491262, 0.9998482184778451, 0.999849504525841, 0.9998507790452249, 0.9996651365659339, 0.999667743762281, 0.9997802471301285, 0.9997820733780778, 0.999783883787624, 0.9993054341551938, 0.9994011300859275, 0.9992351152877893, 0.999240444452562, 0.9985119078414939, 0.9997442816639217, 0.9997462012295875, 0.9995586986767809, 0.9993685635260742, 0.999459240561893, 0.9994631221794904, 0.9990378966995866, 0.9994100361090266, 0.9994143732187595, 0.9974817508778134, 0.9949426054178465, 0.9951279220275832, 0.9975200921432196, 0.9734727916157379, 0.9992366975206455, 0.9988714940440103, 9.36899517879161E-27, 7.95323229021956E-83, 0.7783075672454642, 0.0, 0.528003992015968, 0.529001996007984 };
		
		double[] solutionAbatementVaues = solution.getDICEModelOptimalAbatementPath(DICEModelOptimizationAssignment.AbatementParameterConstraint.BOUNDED, 0.015);
				
		System.out.println("Checking calibration.");

		// Only check the first 15 % of values
		boolean success = true;
		for(int i=1; i<solutionAbatementVaues.length/6; i++) {
			double diff = targetAbatementValues[i] - solutionAbatementVaues[i];
//			System.out.print(i + " : " + diff);

			if(Math.abs(diff) > tolerance) {
				System.out.print(i + ", ");
				success = false;
			}
		}
		if(!success) {
			System.out.println(" <-- found deviation at these time indices.");
			System.out.println("\tAbatement appears to be not the optimal solution (maybe use a smaller learning rate or more iterations)");
		}
		return success;
	}
}
